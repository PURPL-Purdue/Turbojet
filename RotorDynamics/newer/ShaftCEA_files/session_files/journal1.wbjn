# encoding: utf-8
# 2025 R1
SetScriptVersion(Version="25.1.122")
template1 = GetTemplate(
    TemplateName="Static Structural",
    Solver="ANSYS")
system1 = template1.CreateSystem()
engineeringData1 = system1.GetContainer(ComponentName="Engineering Data")
material1 = engineeringData1.GetMaterial(Name="Structural Steel")
material1.DisplayName = "stainless steel"
system1.Delete()
system2 = template1.CreateSystem()
favorites1 = EngData.LoadFavoriteItems()
library1 = EngData.OpenLibrary(
    Name="General Materials",
    Source="General_Materials.xml")
library2 = EngData.OpenLibrary(
    Name="Additive Manufacturing Materials",
    Source="Additive_Manufacturing_Materials.xml")
library3 = EngData.OpenLibrary(
    Name="ANSYS GRANTA Materials Data for Simulation (Sample)",
    Source="Granta_Design_Typical_Materials.xml")
EngData.EnableFilter(Enable=False)
system2.Delete()
system3 = template1.CreateSystem()
EngData.EnableFilter()
EngData.EnableFilter(Enable=False)
EngData.EnableFilter()
EngData.EnableFilter(Enable=False)
EngData.EnableFilter()
EngData.EnableFilter(Enable=False)
EngData.EnableFilter()
EngData.EnableFilter(Enable=False)
library1.Save()
engineeringData2 = system3.GetContainer(ComponentName="Engineering Data")
matl1 = engineeringData2.ImportMaterial(
    Name="Structural Steel",
    Source="General_Materials.xml")
matl1.Delete()
matl2 = engineeringData2.CreateMaterial(Name="Ceramic (")
matl2.DisplayName = "Ceramic (Si3N4)"
matlProp1 = matl2.CreateProperty(
    Name="Density",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp2 = matl2.CreateProperty(
    Name="Elasticity",
    Behavior="Isotropic",
    Qualifiers={"Definition": "", "Behavior": "Isotropic"})
matlProp1.SetData(
    SheetName="Density",
    SheetQualifiers={"Definition": "", "Behavior": ""},
    Index=-1,
    Variables=["Temperature"],
    Values=[["25 [C]"]])
matlProp1.SetData(
    SheetName="Density",
    SheetQualifiers={"Definition": "", "Behavior": ""},
    Variables=["Density"],
    Values=[["3200 [kg m^-3]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=-1,
    Variables=["Temperature"],
    Values=[["25 [C]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Variables=["Young's Modulus"],
    Values=[["310 [Pa]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Variables=["Young's Modulus"],
    Values=[["310000000000 [Pa]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Variables=["Poisson's Ratio"],
    Values=[["0.26"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=-1,
    Variables=["Temperature"],
    Values=[["500 [C]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=1,
    Variables=["Young's Modulus"],
    Values=[["300000000000 [Pa]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=1,
    Variables=["Poisson's Ratio"],
    Values=[["0.26"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=-1,
    Variables=["Temperature"],
    Values=[["1000 [C]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=2,
    Variables=["Young's Modulus"],
    Values=[["290000000000 [Pa]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=2,
    Variables=["Poisson's Ratio"],
    Values=[["0.27"]])
EngData.EnableFilter()
EngData.EnableFilter(Enable=False)
matlProp3 = matl2.CreateProperty(
    Name="Tensile Ultimate Strength",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp3.SetData(
    Index=-1,
    Variables=["Tensile Ultimate Strength"],
    Values=[["600 [Pa]"]])
matlProp3.SetVariableProperty(
    VariableName="Tensile Ultimate Strength",
    Property="Unit",
    Value="MPa")
matlProp3.SetData(
    Variables=["Tensile Ultimate Strength"],
    Values=[["0.0006 [MPa]"]])
matlProp3.SetData(
    Variables=["Tensile Ultimate Strength"],
    Values=[["600 [MPa]"]])
matlProp4 = matl2.CreateProperty(
    Name="Compressive Ultimate Strength",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp4.SetVariableProperty(
    VariableName="Compressive Ultimate Strength",
    Property="Unit",
    Value="MPa")
matlProp4.SetData(
    Index=-1,
    Variables=["Compressive Ultimate Strength"],
    Values=[["3000 [MPa]"]])
Save(Overwrite=True)
matlProp5 = matl2.CreateProperty(
    Name="Thermal Conductivity",
    Behavior="Isotropic",
    Qualifiers={"Definition": "", "Behavior": "Isotropic"})
matlProp5.SetData(
    Index=-1,
    Variables=["Thermal Conductivity"],
    Values=[["22 [W m^-1 C^-1]"]])
matlProp6 = matl2.CreateProperty(
    Name="Specific Heat",
    Definition="Constant Pressure",
    Qualifiers={"Definition": "Constant Pressure", "Behavior": ""})
matlProp6.SetData(
    Index=-1,
    Variables=["Specific Heat"],
    Values=[["700 [J kg^-1 C^-1]"]])
Save(Overwrite=True)
geometry1 = system3.GetContainer(ComponentName="Geometry")
geometry1.Edit()
Save(Overwrite=True)
geometry1.Exit()
modelComponent1 = system3.GetComponent(Name="Model")
modelComponent1.Refresh()
model1 = system3.GetContainer(ComponentName="Model")
model1.Edit()
model1.Edit()
matl3 = engineeringData2.ImportMaterial(
    Name="Stainless Steel",
    Source="General_Materials.xml")
Save(Overwrite=True)
model1.Exit()
modelComponent1.Refresh()
model1.Edit()
Extensions.AddToDefaultExtensions(Id="97cb66d9-d248-4d40-a54a-265af9484739")
Extensions.LoadExtension(Id="97cb66d9-d248-4d40-a54a-265af9484739")
Save(Overwrite=True)
Save(Overwrite=True)
